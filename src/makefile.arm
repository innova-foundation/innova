# Copyright (c) 2009-2010 Satoshi Nakamoto
# Copyright (c) 2017-2021 D e n a r i u s [D]
# Copyright (c) 2019-2021 I n n o v a [INN]
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Run this makefile for ARM processor compiling, defaults to compiling without USE_NATIVETOR enabled

USE_LEVELDB:=1
USE_UPNP:=1
USE_NATIVETOR:=-
USE_IPFS:=1

LINK:=$(CXX)
ARCH:=$(system lscpu | head -n 1 | awk '{print $2}')

DEFS=-DBOOST_SPIRIT_THREADSAFE

DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(CURDIR)/json $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))

DEFS += -DIS_ARCH_64

LMODE = dynamic
LMODE2 = dynamic
ifdef STATIC
    LMODE = static
    ifeq (${STATIC}, all)
        LMODE2 = static
    endif
endif

# for boost 1.37, add -mt to the boost libraries
LIBS += \
 -Wl,-B$(LMODE) \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_chrono$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l curl \
   -l ssl \
   -l crypto \
   -l event \
   -l secp256k1
ifndef USE_NATIVETOR
  override USE_NATIVETOR = -
endif
ifneq (${USE_NATIVETOR}, -)
  DEFS += $(addprefix -I,$(CURDIR)/tor) -DUSE_NATIVETOR=$(USE_NATIVETOR)
endif

ifndef USE_IPFS
  override USE_IPFS = -
endif
ifneq (${USE_IPFS}, -)
  DEFS += $(addprefix -I,$(CURDIR)/ipfs) -DUSE_IPFS=$(USE_IPFS)
endif

ifndef USE_UPNP
    override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
    LIBS += -l miniupnpc
    DEFS += -DUSE_UPNP=$(USE_UPNP)
endif

LIBS+= \
 -Wl,-B$(LMODE2) \
   -l z \
   -l dl \
   -l pthread


# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    LDHARDENING+=-Wl,-z,relro -Wl,-z,now

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    ifdef PIE
        HARDENING+=-fPIE
        LDHARDENING+=-pie
    endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    HARDENING+=-D_FORTIFY_SOURCE=2
#


DEBUGFLAGS=-g


ifeq (${ARCH}, i686)
    EXT_OPTIONS=-msse2
endif


# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=-O2 $(EXT_OPTIONS) -pthread -Wall -Wextra -Wno-ignored-qualifiers -Wno-format -Wno-unused-parameter -std=c++11 -Wno-literal-suffix \
    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)

# Tor C Library Sources
ifeq (${USE_NATIVETOR}, 1)
  @echo "Building with Native Tor Support ...";
  OBJS= \
    obj/address.o \
    obj/addressmap.o \
    obj/aes.o \
    obj/anonymize.o \
    obj/backtrace.o \
    obj/blinding.o \
    obj/bridges.o \
    obj/buffers.o \
    obj/cell_common.o \
    obj/cell_establish_intro.o \
    obj/cell_introduce1.o \
    obj/channel.o \
    obj/channeltls.o \
    obj/circpathbias.o \
    obj/circuitbuild.o \
    obj/circuitlist.o \
    obj/circuitmux.o \
    obj/circuitmux_ewma.o \
    obj/circuitstats.o \
    obj/circuituse.o \
    obj/command.o \
    obj/compat_libevent.o \
    obj/compat_pthreads.o \
    obj/compat_threads.o \
    obj/compat_time.o \
    obj/config.o \
    obj/confparse.o \
    obj/connection.o \
    obj/connection_edge.o \
    obj/connection_or.o \
    obj/container.o \
    obj/control.o \
    obj/crypto.o \
    obj/crypto_curve25519.o \
    obj/crypto_ed25519.o \
    obj/crypto_format.o \
    obj/crypto_pwbox.o \
    obj/crypto_s2k.o \
    obj/cpuworker.o \
    obj/csiphash.o \
    obj/curve25519-donna.o \
    obj/di_ops.o \
    obj/dircollate.o \
    obj/directory.o \
    obj/dirserv.o \
    obj/dirvote.o \
    obj/dns.o \
    obj/dnsserv.o \
    obj/ed25519_cert.o \
    obj/ed25519_tor.o \
    obj/entrynodes.o \
    obj/ext_orport.o \
    obj/fe_copy.o \
    obj/fe_cmov.o \
    obj/fe_isnegative.o \
    obj/fe_sq.o \
    obj/fe_pow22523.o \
    obj/fe_isnonzero.o \
    obj/fe_neg.o \
    obj/fe_frombytes.o \
    obj/fe_invert.o \
    obj/fe_sub.o \
    obj/fe_add.o \
    obj/fe_1.o \
    obj/fe_mul.o \
    obj/fe_tobytes.o \
    obj/fe_0.o \
    obj/fe_sq2.o \
    obj/fp_pair.o \
    obj/ge_scalarmult_base.o \
    obj/ge_p3_tobytes.o \
    obj/ge_frombytes.o \
    obj/ge_double_scalarmult.o \
    obj/ge_tobytes.o \
    obj/ge_p3_to_cached.o \
    obj/ge_p3_to_p2.o \
    obj/ge_p3_dbl.o \
    obj/ge_p3_0.o \
    obj/ge_p1p1_to_p2.o \
    obj/ge_p1p1_to_p3.o \
    obj/ge_add.o \
    obj/ge_p2_0.o \
    obj/ge_p2_dbl.o \
    obj/ge_madd.o \
    obj/ge_msub.o \
    obj/ge_sub.o \
    obj/ge_precomp_0.o \
    obj/geoip.o \
    obj/hibernate.o \
    obj/hs_cache.o \
    obj/hs_circuitmap.o \
    obj/hs_common.o \
    obj/hs_descriptor.o \
    obj/hs_intropoint.o \
    obj/hs_service.o \
    obj/keyconv.o \
    obj/keypair.o \
    obj/keypin.o \
    obj/keccak-tiny-unrolled.o \
    obj/link_handshake.o \
    obj/log.o \
    obj/tormain.o \
    obj/memarea.o \
    obj/microdesc.o \
    obj/networkstatus.o \
    obj/nodelist.o \
    obj/ntmain.o \
    obj/onion.o \
    obj/onion_fast.o \
    obj/onion_ntor.o \
    obj/onion_tap.o \
    obj/open.o \
    obj/parsecommon.o \
    obj/periodic.o \
    obj/policies.o \
    obj/procmon.o \
    obj/protover.o \
    obj/pwbox.o \
    obj/reasons.o \
    obj/readpassphrase.o \
    obj/relay.o \
    obj/rendcache.o \
    obj/rendclient.o \
    obj/rendcommon.o \
    obj/rendmid.o \
    obj/rendservice.o \
    obj/rephist.o \
    obj/replaycache.o \
    obj/router.o \
    obj/routerkeys.o \
    obj/routerlist.o \
    obj/routerparse.o \
    obj/routerset.o \
    obj/sandbox.o \
    obj/sc_reduce.o \
    obj/sc_muladd.o \
    obj/scheduler.o \
    obj/shared_random.o \
    obj/shared_random_state.o \
    obj/sign.o \
    obj/statefile.o \
    obj/status.o \
    obj/torcert.o \
    obj/torcompat.o \
    obj/tor_main.o \
    obj/torgzip.o \
    obj/tortls.o \
    obj/torutil.o \
    obj/transports.o \
    obj/trunnel.o \
    obj/util_bug.o \
    obj/util_format.o \
    obj/util_process.o \
    obj/workqueue.o
endif

OBJS= \
    obj/echo.o \
    obj/jh.o \
    obj/keccak.o \
	  obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/hash.o \
    obj/base58.o \
    obj/db.o \
    obj/init.o \
    obj/keystore.o \
    obj/miner.o \
    obj/main.o \
    obj/net.o \
	  obj/core.o \
    obj/protocol.o \
    obj/innovarpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/rpcsmessage.o \
    obj/rpchyperfile.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-arm.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/smessage.o \
    obj/stealth.o \
  	obj/activecollateralnode.o \
  	obj/collateralnodeconfig.o \
    obj/collateralnode.o \
    obj/rpccollateral.o \
    obj/spork.o \
    obj/collateral.o \
  	obj/eccryptoverify.o \
    obj/ringsig.o \
    obj/bloom.o \
    obj/state.o \
    obj/idns.o \
    obj/namecoin.o \
    obj/ipfs.o \
    obj/ipfscurl.o  \
    obj/utiltime.o \
    obj/stun.o


all: innovad

#
# LevelDB support
#
ifeq (${USE_LEVELDB}, 1)
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include) -DUSE_LEVELDB
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; CC=$(CC) CXX=$(CXX) make libleveldb.a libmemenv.a; cd ..;
obj/txdb-leveldb.o: leveldb/libleveldb.a
endif
ifneq (${USE_LEVELDB}, 1)
OBJS += obj/txdb-bdb.o
endif

# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-arm.o: scrypt-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/%.o: %.c
	$(CXX) -c $(xCXXFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
    sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
    -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

obj/%.o: json/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

ifeq (${USE_NATIVETOR}, 1)
	obj/%.o: tor/%.c
    $(CC) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
    @cp $(@:%.o=%.d) $(@:%.o=%.P); \
    sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
    -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
    rm -f $(@:%.o=%.d)

	obj/anonymize.o: tor/anonymize.cpp
    $(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
    @cp $(@:%.o=%.d) $(@:%.o=%.P); \
    sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
    -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
    rm -f $(@:%.o=%.d)
endif

ifeq (${USE_IPFS}, 1)
obj/%.o: %.cc
	$(CC) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)
endif

innovad: $(OBJS:obj/%=obj/%)
	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)

clean:
	-rm -f innovad
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/*.d
	-rm -f obj/build.h -rm -f obj/tor/*.o -rm -f obj/tor/*.P -rm -f obj/ipfs/*.o -rm -f obj/ipfs/*.P
	-cd leveldb && $(MAKE) clean || true

FORCE:
